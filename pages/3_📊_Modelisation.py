import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import cross_val_score
from sklearn.metrics import r2_score
import plotly.express as px
import plotly.graph_objects as go
from scripts.modele_mixtes import modele_mixtes
from scripts.nettoyage import nettoyer_donnees, identifier_variables_heritabilite, analyser_structure_genetique
from scripts.visualisation import (
    plot_trait_distribution,
    plot_heritability_results,
    plot_genetic_correlations,
    plot_trait_evolution,
    generate_summary_report
)

def app():
    st.title("üìä Mod√©lisation et estimation de l'h√©ritabilit√©")
    
    # Chargement et nettoyage des donn√©es
    df = st.session_state.get('df')
    if df is None:
        st.warning("Veuillez d'abord importer un fichier.")
        return

    # Identification automatique des variables
    variables = identifier_variables_heritabilite(df)
    
    if variables is None:
        st.error("""
        ‚ö†Ô∏è Structure des donn√©es incorrecte. Votre fichier doit contenir:
        
        1. Identification:
           - ID ou Sujet : identifiant unique de l'animal
        
        2. Variables de production (au moins une):
           - Rendement_lait/Production_lait
           - Taux_mg/Mati√®re_grasse
           - Taux_prot/Prot√©ine
        
        3. Variables g√©n√©alogiques:
           - P√®re/pere
           - M√®re/mere
           - Autres liens familiaux (optionnels)
        
        4. Variables environnementales (optionnelles):
           - Saison
           - Elevage
           - etc.
        """)
        return

    # Nettoyage approfondi des donn√©es
    df_clean, encoders = nettoyer_donnees(df)
    
    if df_clean.empty:
        st.error("Le nettoyage des donn√©es a √©chou√© ou a r√©sult√© en un DataFrame vide.")
        return

    # Analyse de la structure g√©n√©tique
    st.subheader("üß¨ Analyse de la structure g√©n√©tique")
    resultats_genetiques = analyser_structure_genetique(df_clean)
    
    # Affichage des r√©sultats de l'analyse g√©n√©tique
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("üìä Profondeur g√©n√©alogique:")
        st.write(f"Nombre de g√©n√©rations: {resultats_genetiques.get('profondeur_genealogique', 'N/A')}")
        
        if 'stats_parents' in resultats_genetiques and resultats_genetiques['stats_parents'] is not None:
            st.write("üìã Statistiques parentales:")
            stats = resultats_genetiques['stats_parents']
            st.write(f"‚Ä¢ Deux parents connus: {stats.get('deux_parents', 0)}")
            st.write(f"‚Ä¢ Un parent connu: {stats.get('un_parent', 0)}")
            st.write(f"‚Ä¢ Aucun parent connu: {stats.get('aucun_parent', 0)}")
        else:
             st.write("üìã Statistiques parentales: Non disponibles (colonnes P√®re/M√®re manquantes).")

    with col2:
        if resultats_genetiques and 'clusters' in resultats_genetiques and resultats_genetiques['clusters'] is not None:
            st.write("üîç Groupes g√©n√©tiques identifi√©s:")
            clusters = resultats_genetiques['clusters']
            variance = clusters.get('variance_expliquee')
            if variance and len(variance) >= 2:
                st.write(f"Variance expliqu√©e: {variance[0]:.2%}, {variance[1]:.2%}")
            else:
                st.write("Variance expliqu√©e: Non disponible (moins de 2 composantes).")
            
            # Visualisation des clusters
            if resultats_genetiques and 'clusters' in resultats_genetiques and resultats_genetiques['clusters'] is not None and len(variables['traits']) >= 2 and len(clusters.get('centres', [])) > 1:
                try:
                    fig = go.Figure()
                    for i in range(len(clusters['centres'])):
                        if i < len(clusters.get('labels', [])):
                            mask = np.array(clusters['labels']) == i
                            if len(clusters['centres'][i]) >= 2:
                                fig.add_trace(go.Scatter(
                                    x=[clusters['centres'][i][0]],
                                    y=[clusters['centres'][i][1]],
                                    mode='markers',
                                    name=f'Groupe {i+1}',
                                    marker=dict(size=10)
                                ))
                    fig.update_layout(
                        title="Groupes g√©n√©tiques",
                        xaxis_title="Composante 1",
                        yaxis_title="Composante 2"
                    )
                    st.plotly_chart(fig)
                except Exception as e:
                    st.warning(f"Impossible de visualiser les clusters: {e}")
            else:
                 st.info("Pas assez de donn√©es pour visualiser les groupes g√©n√©tiques (moins de 2 caract√®res ou groupes identifi√©s).")
        else:
             st.info("Analyse de clustering non disponible (pas assez de caract√®res num√©riques). ")

    st.markdown("---")
    
    # --- Mod√®le lin√©aire mixte (h√©ritabilit√©) ---
    st.subheader("üìà Estimation de l'h√©ritabilit√© (h¬≤)")
    
    heritabilites = {}
    
    if 'ID' not in df_clean.columns or df_clean['ID'].nunique() < 2:
        st.warning("""
        ‚ö†Ô∏è Impossible d'estimer l'h√©ritabilit√©.
        La colonne 'ID' doit contenir au moins deux valeurs uniques pour l'analyse par mod√®le lin√©aire mixte.
        Veuillez v√©rifier votre fichier de donn√©es.
        """)
    else:
        for caractere in variables['traits']:
            try:
                # Calcul de l'h√©ritabilit√©
                results = modele_mixtes(df_clean, caractere)
                heritabilites[caractere] = results
                
                # Affichage des r√©sultats
                st.write(f"üìä {caractere}:")
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("H√©ritabilit√©:")
                    st.write(f"‚Ä¢ h¬≤ = {results.get('h2', np.nan):.3f} ¬± {results.get('se', np.nan):.3f}")
                    st.write(f"‚Ä¢ IC-95%: [{results.get('ci_lower', np.nan):.3f}, {results.get('ci_upper', np.nan):.3f}]")
                
                with col2:
                    st.write("Composantes de la variance:")
                    st.write(f"‚Ä¢ G√©n√©tique: {results.get('var_genetique', np.nan):.3f}")
                    st.write(f"‚Ä¢ R√©siduelle: {results.get('var_residuelle', np.nan):.3f}")
                
                # Visualisation de la distribution par g√©n√©ration
                st.plotly_chart(plot_trait_distribution(df_clean, caractere))
                
                # Visualisation de l'√©volution
                st.plotly_chart(plot_trait_evolution(df_clean, caractere))
                
            except Exception as e:
                st.error(f"Erreur lors de l'estimation de l'h√©ritabilit√© pour {caractere}: {str(e)}")
                heritabilites[caractere] = None
    
    # Visualisation des r√©sultats d'h√©ritabilit√©
    if heritabilites and any(results is not None for results in heritabilites.values()):
        st.subheader("üìä Comparaison des h√©ritabilit√©s")
        st.plotly_chart(plot_heritability_results(heritabilites))
        
        # Corr√©lations g√©n√©tiques
        if len([r for r in heritabilites.values() if r is not None]) > 1 and variables and 'traits' in variables and len(variables['traits']) > 1:
            st.subheader("üîç Corr√©lations entre caract√®res")
            successful_traits = [trait for trait, results in heritabilites.items() if results is not None]
            if len(successful_traits) > 1:
                 try:
                      st.plotly_chart(plot_genetic_correlations(df_clean, successful_traits))
                 except Exception as e:
                      st.warning(f"Impossible de calculer les corr√©lations g√©n√©tiques: {e}")
            else:
                 st.info("Pas assez de caract√®res avec une h√©ritabilit√© estim√©e pour calculer les corr√©lations g√©n√©tiques.")

    # G√©n√©ration du rapport
    st.subheader("üìù R√©sum√© des r√©sultats")
    st.markdown(generate_summary_report(heritabilites))
    
    # Sauvegarde des r√©sultats pour le rapport
    st.session_state['heritabilites'] = heritabilites

    st.markdown("---")
    
    # --- Mod√©lisation RandomForest ---
    st.subheader("ü§ñ Mod√©lisation par Intelligence Artificielle")
    
    if variables and 'traits' in variables and variables['traits']:
        caractere = st.selectbox("Caract√®re √† mod√©liser", variables['traits'])
        if caractere:
            # Pr√©paration des features
            features = [col for col in df_clean.columns if col != caractere and (variables is None or col != variables.get('id'))]
            
            # Filter out non-numeric features for RandomForest
            numeric_features = df_clean[features].select_dtypes(include=np.number).columns.tolist()
            
            if not numeric_features:
                st.warning("Aucune variable num√©rique disponible pour la mod√©lisation RandomForest.")
            else:
                 X = df_clean[numeric_features]
                 y = df_clean[caractere]
                
                # Drop rows with NaNs in features or target for RandomForest
                 combined_cols = numeric_features + [caractere]
                 df_model = df_clean[combined_cols].dropna()
                
                 if df_model.empty:
                      st.warning(f"Pas de donn√©es compl√®tes pour la mod√©lisation RandomForest de {caractere}.")
                 elif len(df_model) < 5:
                      st.warning(f"Pas assez de donn√©es ({len(df_model)} √©chantillons) pour la mod√©lisation RandomForest de {caractere}. Au moins 5 √©chantillons sont requis.")
                 else:
                    X_model = df_model[numeric_features]
                    y_model = df_model[caractere]

                    try:
                        # Entra√Ænement du mod√®le
                        model = RandomForestRegressor(n_estimators=100, random_state=42)
                        
                        # Cross-validation
                        cv_folds = min(5, len(df_model))
                        cv_scores = cross_val_score(model, X_model, y_model, cv=cv_folds)
                        
                        # Entra√Ænement final
                        model.fit(X_model, y_model)
                        y_pred = model.predict(X_model)
                        r2 = r2_score(y_model, y_pred)
                        
                        # Affichage des r√©sultats
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write("üìà Performance du mod√®le:")
                            st.write(f"‚Ä¢ R¬≤ score: {r2:.3f}")
                            st.write(f"‚Ä¢ CV scores ({cv_folds}-fold): {cv_scores.mean():.3f} ¬± {cv_scores.std():.3f}")
                        
                        with col2:
                            # Importance des variables
                            importances = dict(zip(numeric_features, model.feature_importances_))
                            st.write("üéØ Importance des variables:")
                            
                            # Tri des importances
                            sorted_importances = dict(sorted(importances.items(), key=lambda x: x[1], reverse=True)[:10])
                            
                            # Cr√©ation du graphique avec Plotly
                            if sorted_importances:
                                fig = px.bar(
                                    x=list(sorted_importances.values()),
                                    y=list(sorted_importances.keys()),
                                    orientation='h',
                                    title=f"Top 10 des variables les plus importantes pour {caractere}"
                                )
                                fig.update_layout(
                                    xaxis_title="Importance",
                                    yaxis_title="Variables"
                                )
                                st.plotly_chart(fig)
                            else:
                                st.info("Aucune importance de variable √† afficher (mod√®le non entra√Æn√© ou sans features).")
                            
                        # Sauvegarde pour le rapport
                        st.session_state['rapport'] = {
                            'analyse_genetique': resultats_genetiques,
                            'model_performance': {
                                'r2': r2,
                                'cv_scores': cv_scores.tolist()
                            },
                            'feature_importance': sorted_importances,
                            'target': caractere,
                            'features': numeric_features
                        }

                    except Exception as model_e:
                        st.error(f"Erreur lors de la mod√©lisation RandomForest pour {caractere}: {model_e}")
        
    else:
        st.warning("Aucun caract√®re de production identifi√© pour la mod√©lisation RandomForest.")
